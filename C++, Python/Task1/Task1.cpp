 //Task1.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.

 //Задача 1. Вычислить f(x)
 //x^2, x > x^2 - 5
 //sin^2(x), x <= x^2 - 5 

#include <iostream>
#include "Task1.h"

using namespace std;

int main()
{
    cout.precision(16); // comment
    const double x_1{ (1 + sqrt(21)) / 2 }, x_2{ (1 - sqrt(21)) / 2 };
    cout << "if else condition: " << f_1(x_1);
    cout << "\n?: condition : " << f_2(x_2);
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

//--функции, разделенные по смыслу, должны храниться в разных файлах
//и подсоединяться к программе через файл проекта.
//--прототипы функций должны быть собраны в один или несколько заголовочных
//файлов и подключаться через #include
//--все константы в программе должны быть переменными с модификатором const.
//--внешними переменными(теми, которые используются внутри функций как
//    внешние) могут быть только константы.вся остальная информация
//    передается в функции через параметры.
//    --динамическое распределение памяти используется только там, где оно
//    необходимо.обязательным является освобождение памяти.
//    --отведение и освобождение памяти, открытие и закрытие файлов должно
//    происходить на одном и том же структурном уровне.
//    --возможны два способа обработки обнаружения ошибки внутри функции :
//если ошибка критическая, то выход из программы; но лучше, если
//функция возвращает к. - л.специальное значение, которое обрабатывается
//в вызывающей функции. (пока речь не идет о выбрасывании исключений –
//    это будет позже.)
//    --при вводе параметров должен быть контроль над допустимостью вводимых
//    значений.
//    --при разработке функций нужно реализовывать несколько больше
//    возможностей, чем требуется в данной задаче(например, если нужно
//        нарисовать что - то в определенном месте на экране, то лучше написать функцию,
//        которая может рисовать в любом месте).более того, нужно
//    предполагать, что делается общественно - полезная вещь, которую будут
//    использовать другие люди(программисты).
//    --нельзя в функциях перемешивать полезные действия с объектами и
//    взаимодействие с внешними устройствами(например, вывод на печать),
//    так как это системо - зависимые действия.
//    --при объединении некоторых действий в одну функцию нужно учитывать их
//    объективную взаимосвязь(и не учитывать субъективную, т.е.то, что в
//        данной программе эти действия идут друг за другом).
//    --минимальные комментарии к каждой функции состоят из описания действия
//    функции, ее параметров и пр. (из этого потом генерируется
//        описание программы) – можете посмотреть на правила генерации описания
//    программы в doxygen.
//    --используйте для идентификаторов осмысленные обозначения, основанные
//    на словах английского языка.
//    --при организации вычислений нужно предусматривать возможные переполнения
//    при арифметических операциях.